{"name":"Actionsheetpicker-3.0","tagline":"Quickly reproduce the dropdown UIPickerView / ActionSheet functionality from Safari on iPhone/ iOS / CocoaTouch.","body":"[![Version](http://img.shields.io/cocoapods/v/ActionSheetPicker-3.0.svg)](http://cocoadocs.org/docsets/ActionSheetPicker-3.0)\r\n[![Build Status](https://travis-ci.org/skywinder/ActionSheetPicker-3.0.svg?branch=master)](https://travis-ci.org/skywinder/ActionSheetPicker-3.0)\r\n[![License](https://img.shields.io/cocoapods/l/ActionSheetPicker-3.0.svg)](http://cocoadocs.org/docsets/ActionSheetPicker-3.0)\r\n[![Platform](https://img.shields.io/cocoapods/p/ActionSheetPicker-3.0.svg)](http://cocoadocs.org/docsets/ActionSheetPicker-3.0)\r\n[![Issues](http://img.shields.io/github/issues/skywinder/ActionSheetPicker-3.0.svg)](https://github.com/skywinder/ActionSheetPicker-3.0/issues?state=open)\r\n\r\nActionSheetPicker-3.0\r\n==================\r\n- [Overview](#overview)\r\n\t- [Benefits](#benefits)\r\n- [QuickStart](#quickstart)\r\n\t- [Basic Usage](#basic-usage)\r\n\t- [ActionSheetCustomPicker Customisation](#actionsheetcustompicker-customisation)\r\n- [Installation](#installation)\r\n- [Example Projects](#example-projects)\r\n- [Screenshots](#screen-shots)\r\n- [Apps using this library](#apps-using-this-library)\r\n- [Maintainer and Contributor](#maintainer-and-contributor)\r\n- [Credits](#credits)\r\n- [Contributing](#contributing)\r\n\r\nSince the [Tim's repo](https://github.com/TimCinel/ActionSheetPicker) is not support iOS 7+, I forked from his repo and implement iOS 7-8 support, and also bunch of UI fixes, crash-fixes and different customisation abilities.\r\n\r\nNew updates will be added only in this repo.\r\n\r\nPlease welcome: **ActionSheetPicker-3.0**!\r\n\r\n`pod 'ActionSheetPicker-3.0', '~> 1.3.4'` (**iOS 6-7-8** compatible!)\r\n\r\nImprovements more than welcome - they are kindly requested :)\r\n\r\n_Regards, Petr Korolev_\r\n\r\n##ActionSheetPicker = UIPickerView + UIActionSheet ##\r\n\r\n![ActionSheetLocalePicker](https://raw.githubusercontent.com/skywinder/ActionSheetPicker-3.0/master/Screenshots/locale.png \"ActionSheetLocalePicker\")\r\n\r\nWell, that's how it started. Now, the following is more accurate:\r\n\r\n * _**iPhone/iPod** ActionSheetPicker = ActionSheetPicker = A Picker + UIActionSheet_\r\n * _**iPad** ActionSheetPicker = A Picker + UIPopoverController_\r\n\r\n\r\n## Overview ##\r\nEasily present an ActionSheet with a PickerView, allowing user to select from a number of immutable options. \r\n\r\n### Benefits ##\r\n\r\n * Spawn pickers with convenience function - delegate or reference\r\n   not required. Just provide a target/action callback.\r\n * Add buttons to UIToolbar for quick selection (see ActionSheetDatePicker below)\r\n * Delegate protocol available for more control\r\n * Universal (iPhone/iPod/iPad)\r\n\r\n## QuickStart\r\n\r\nThere are 4 distinct picker view options: `ActionSheetStringPicker`, `ActionSheetDistancePicker`, `ActionSheetDatePicker`, and `ActionSheetCustomPicker`. We'll focus here on how to use the `ActionSheetStringPicker` since it's most likely the one you want to use.\r\n\r\n### Basic Usage ##\r\n\r\n```objective-c\r\n// Inside a IBAction method:\r\n\r\n// Create an array of strings you want to show in the picker:\r\nNSArray *colors = [NSArray arrayWithObjects:@\"Red\", @\"Green\", @\"Blue\", @\"Orange\", nil];\r\n\r\n[ActionSheetStringPicker showPickerWithTitle:@\"Select a Color\"\r\n                                        rows:colors\r\n                            initialSelection:0\r\n                                   doneBlock:nil\r\n                                 cancelBlock:nil\r\n                                      origin:sender];\r\n```\r\n\r\n#### But you probably want to know when something happens, huh?\r\n\r\n```obj-c\r\n// Inside a IBAction method:\r\n\r\n// Create an array of strings you want to show in the picker:\r\nNSArray *colors = [NSArray arrayWithObjects:@\"Red\", @\"Green\", @\"Blue\", @\"Orange\", nil];\r\n\r\n[ActionSheetStringPicker showPickerWithTitle:@\"Select a Color\"\r\n                                        rows:colors\r\n                            initialSelection:0\r\n                                   doneBlock:^(ActionSheetStringPicker *picker, NSInteger selectedIndex, id selectedValue) {\r\n                                      NSLog(@\"Picker: %@\", picker);\r\n                                      NSLog(@\"Selected Index: %@\", selectedIndex);\r\n                                      NSLog(@\"Selected Value: %@\", selectedValue);\r\n                                    }\r\n                                 cancelBlock:^(ActionSheetStringPicker *picker) {\r\n                                      NSLog(@\"Block Picker Canceled\");\r\n                                    }\r\n                                      origin:sender];\r\n// You can also use self.view if you don't have a sender\r\n```\r\n\r\n### ActionSheetCustomPicker Customisation\r\n\r\nActionSheetCustomPicker provides the following delegate function that can be used for customization:\r\n\r\n```obj-c\r\n- (void)actionSheetPicker:(AbstractActionSheetPicker *)actionSheetPicker configurePickerView:(UIPickerView *)pickerView;\r\n```\r\nThis method is called right before `actionSheetPicker` is presented and it can be used to customize the appearance and properties of the `actionSheetPicker` and the `pickerView` associated with it.\r\n\r\n\r\n#### Want custom buttons view? Ok!\r\n\r\nExample with custom text in Done button:\r\n```obj-c\r\n    ActionSheetStringPicker *picker = [[ActionSheetStringPicker alloc] initWithTitle:@\"Select a Block\" rows:colors initialSelection:0 doneBlock:done cancelBlock:cancel origin:sender];\r\n    [picker setDoneButton:[[UIBarButtonItem alloc] initWithTitle:@\"My Text\"  style:UIBarButtonItemStylePlain target:nil action:nil]];\r\n    [picker showActionSheetPicker];\r\n```\r\n\r\nExample with custom button for cancel button:\r\n```obj-c\r\n    ActionSheetStringPicker *picker = [[ActionSheetStringPicker alloc] initWithTitle:@\"Select a Block\" rows:colors initialSelection:0 doneBlock:done cancelBlock:cancel origin:sender];\r\n    UIButton *cancelButton =  [UIButton buttonWithType:UIButtonTypeCustom];\r\n    [cancelButton setImage:[UIImage imageNamed:@\"cancel.png\"] forState:UIControlStateNormal];\r\n    [cancelButton setFrame:CGRectMake(0, 0, 32, 32)];\r\n    [picker setCancelButton:[[UIBarButtonItem alloc] initWithCustomView:cancelButton]];\r\n    [picker showActionSheetPicker];\r\n```\r\n\r\n#### What about custom buttons callbacks? Let's check it out:\r\n \r\n```obj-c\r\n // Inside a IBAction method:\r\n\r\n // Create an array of strings you want to show in the picker:\r\nNSArray *colors = [NSArray arrayWithObjects:@\"Red\", @\"Green\", @\"Blue\", @\"Orange\", nil];\r\n \r\n //Create your picker:\r\nActionSheetStringPicker *colorPicker = [[ActionSheetStringPicker alloc] initWithTitle:@\"Select a color\"\r\n                                                                                 rows:colors\r\n                                                                     initialSelection:0\r\n                                                                               target:nil\r\n                                                                        successAction:nil\r\n                                                                         cancelAction:nil\r\n                                                                               origin:sender];\r\n \r\n //You can pass your picker a value on custom button being pressed:\r\n[colorPicker addCustomButtonWithTitle:@\"Value\" value:@([colors indexOfObject:colors.lastObject])];\r\n \r\n //Or you can pass it custom block:\r\n[colorPicker addCustomButtonWithTitle:@\"Block\" actionBlock:^{\r\n    NSLog(@\"Custom block invoked\");\r\n}];\r\n\r\n //If you prefer to send selectors rather than blocks you can use this method:\r\n[colorPicker addCustomButtonWithTitle:@\"Selector\" target:self selector:@selector(awesomeSelector)];\r\n```\r\n \r\n##Installation##\r\n\r\n-  The most easiest way is through [Cocoapods](http://cocoapods.org/).\r\nJust add to your Podfile string: `pod 'ActionSheetPicker-3.0'`\r\n\r\n-  The \"old school\" way is manually add to your project all from [Pickers](/Pickers) folder and import necessary headers.\r\n\r\n## Example Projects##\r\n#### For iOS 8 (Objective-C + Swift):\r\n`open Example.xcworkspace`\r\n\r\nHere is 4 projects:\r\n\r\n- **CoreActionSheetPicker** - all picker files combined in one Framework. (available since `iOS 8`)\r\n- **ActionSheetPicker** - modern and descriptive Obj-C project with many examples.\r\n- **Swift-Example** - example, written on Swift. (only with basic 3 Pickers examples, for all examples please run `ActionSheetPicker` project)\r\n- **ActionSheetPicker-iOS6-7** -  iOS 6 and 7 comparable project. or to run only this project `open Example-for-and-6/ActionSheetPicker.xcodeproj`\r\n\r\n## Screen Shots\r\n\r\n![ActionSheetPicker](https://raw.githubusercontent.com/skywinder/ActionSheetPicker-3.0/master/Screenshots/string.png \"ActionSheetPicker\")\r\n![ActionSheetDatePicker](https://raw.githubusercontent.com/skywinder/ActionSheetPicker-3.0/master/Screenshots/date.png \"ActionSheetDatePicker\")\r\n![ActionSheetDatePicker](https://raw.githubusercontent.com/Jack-s/ActionSheetPicker-3.0/master/Screenshots/time.png \"ActionSheetDatePicker\")\r\n![CustomButtons](https://raw.githubusercontent.com/skywinder/ActionSheetPicker-3.0/master/Screenshots/custom.png \"CustomButtons\")\r\n![iPad Support](https://raw.githubusercontent.com/skywinder/ActionSheetPicker-3.0/master/Screenshots/ipad.png \"iPad Support\")\r\n\r\n\r\n## [Apps using this library](https://github.com/skywinder/ActionSheetPicker-3.0/wiki/Apps-using-ActionSheetPicker-3.0) \r\n*If you are using `ActionSheetPicker-3.0` in your app or know of an app that uses it, please add it to [this] (https://github.com/skywinder/ActionSheetPicker-3.0/wiki/Apps-using-ActionSheetPicker-3.0) list.*\r\n\r\n## Maintainer and Contributor\r\n\r\n- [Petr Korolev](http://github.com/skywinder) (update to iOS 7 and iOS 8, implementing new pickers, community support)\r\n\r\n## Credits\r\n\r\n- ActionSheetPicker was originally created by [Tim Cinel](http://github.com/TimCinel) ([@TimCinel](http://twitter.com/TimCinel))\r\n\r\n- And most of all, thanks to ActionSheetPicker-3.0's [growing list of contributors](https://github.com/skywinder/ActionSheetPicker-3.0/graphs/contributors).\r\n\r\n## Contributing\r\n\r\n1. Create an issue to discuss about your idea\r\n2. Fork it (https://github.com/skywinder/ActionSheetPicker-3.0/fork)\r\n3. Create your feature branch (`git checkout -b my-new-feature`)\r\n4. Commit your changes (`git commit -am 'Add some feature'`)\r\n5. Push to the branch (`git push origin my-new-feature`)\r\n6. Create a new Pull Request\r\n\r\n**Bug reports, feature requests, patches, well-wishes, and rap demo tapes are always welcome.**\r\n","google":"UA-52127948-1","note":"Don't delete this file! It's used internally to help with page regeneration."}